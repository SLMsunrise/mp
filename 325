<template>
  <div class="SmartScan">
    <GoBack></GoBack>
    <div class="sscan_body">
      <div class="sscan_body_one">
        <div class="sscan_body_left">
          <div class="sbl_top">
            <i class="engine renwu"></i>
            <span id="tip_title">扫描任务</span>
          </div>
          <div class="cbl_body_left">

            <ul>
              <li class="SmartScan_check">
                <i class="xxmeagess">
                  {{TmessageList.length}}
                </i>
                <i class="engine wangluo1"></i>
                <i class="sjx"></i>
              </li>

              <li>
                <i class="xxmeagess">
                  {{IntranetScan.length}}
                </i>
                <i class="engine neiwang"></i>
                <i class="sjx"></i>

              </li>
              <li>
                <i class="xxmeagess">
                  {{ScanPort.length}}
                </i>
                <i class="engine scanport"></i>
                <i class="sjx"></i>
              </li>
              <li>
                <i class="xxmeagess">
                  {{FingerScan.length}}
                </i>
                <i class="engine zhiwen"></i>
              </li>
            </ul>



          </div>
          <div class="cbl_body_right" style="display: block">
            <div class="cbl_right_ditu">
              <div class="ditu_title">
                <div class="ditu_title_one">节点</div>
                <div class="ditu_title_two">IP地址</div>
                <div class="ditu_title_three">运营商</div>
                <div class="ditu_title_four">地理位置</div>
                <div class="ditu_title_five">响应时长</div>
              </div>
              <div class="ditu_list">
                <ul>

                  <li v-for="(item,index) in TmessageList">
                    <span class="ditu_title_one">{{++index}}</span>
                    <span class="ditu_title_two">{{item.ip}}</span>
                    <span class="ditu_title_three">{{item.operators}}</span>
                    <span class="ditu_title_four">{{item.addres}}</span>
                    <span class="ditu_title_five">{{item.time}}ms</span>
                  </li>

                </ul>
              </div>
            </div>
          </div>
          <!---->
          <div class="cbl_body_right cbl_body_right_two ">
            <ul>
              <li v-for="(item,index) in IntranetScan">
                <span class="cbl_body_right_two_span1">{{++index}}</span>
                <span class="cbl_body_right_two_span2">{{item.scanType}}</span>
                <span class="cbl_body_right_two_span3"><i class="engine shexiangtou1"></i> </span>
                <span class="cbl_body_right_two_span4">{{item.hostIp}}</span>
                <span class="cbl_body_right_two_span5">{{item.hostVendor}}</span>
              </li>

            </ul>



          </div>
          <div class="cbl_body_right cbl_body_right_three">
            <ul>
              <li v-for="(item,index) in ScanPort">
                <span class="cbl_body_right_three_span1">{{++index}}</span>
                <span class="cbl_body_right_three_span2">
                  <em>{{item.port}}</em>
                  <em>{{item.protocol}}</em>
                </span>
                <span class="cbl_body_right_three_span3">{{item.service}}</span>
                <span class="cbl_body_right_three_span4">{{item.count}}</span>
              </li>

            </ul>
          </div>
            <!--<div class="zuwangxq">-->
              <!--<p>192.168.5.101</p>-->
              <!--<p>HTTP/1.1 401 Unauthorized<br>-->
                <!--Date: Sun, 28 Jun 2020 11:23:31 GMT</p>-->
            <!--</div>-->


          <div class="cbl_body_right cbl_body_right_four">

            4


          </div>
          <!---->

        </div>

        <!--组网信息-->
        <div class="sscan_body_right" style="display: block">
          <div class="sbl_top">
            <i class="engine neiwang"></i>
            <span>组网信息</span>
          </div>
          <div id="mynetwork_ly">


          </div>
          <!-- 主机信息显示组件 -->
          <hostMessage :hostData="hostData"></hostMessage>

        </div>



      </div>

      <!--底部-->
      <div class="sscan_body_full" style="display: block">
        <i class="lt"></i>
        <i class="rt"></i>
        <i class="lb"></i>
        <i class="rb"></i>
        <div class="console" id="printTerm"></div>
      </div>
    </div>



  </div>
</template>

<script>
  import hostMessage from '../../../views/device/subComponent/hostMessage'
  import GoBack from '../../../components/GoBack'
  import Terminal from '../../../assets/plug/xtermjs/xterm-3.9.1.min'
  import '../../../assets/plug/openlayers/ol.css'
  import '../../../assets/plug/xtermjs/xterm-3.9.1.min.css'
  import vis from 'vis';

  const mark1 = require("../../../assets/img/refresh/tpt1.jpg")
  const tptlist1 = require("../../../assets/img/camera.png")
  const tptlist2 = require("../../../assets/img/other.png")
  const tptlist3 = require("../../../assets/img/computer.png")
  const tptlist4 = require("../../../assets/img/router.png")
  const tptlist5 = require("../../../assets/img/windows.png")
  const tptlist6 = require("../../../assets/img/printer.png")
  const tptlist7 = require("../../../assets/img/phone.png")



  export default {
      name: "SmartScan",
      //注意命名规则
      data(){
        return{
          createFig:'',
          createPor:'',
          createZj:'',
          createzw:'',
          createtpt:'',     //状态码，创建拓扑图的，后续连用控制台打印输出
          TmessageList:'',  //路由
          IntranetScan:'',  //主机
          ScanPort:'',      //端口
          FingerScan:'',    //指纹
          terminal: new Terminal({
            allowTransparency: true, // 背景支持透明色
            cursorBlink: true, // 开启光标闪烁
            cursorStyle: 'block', // 光标样式 block/underline/bar
            convertEol:true,
            disableStdin: true, // 禁用输入
            fontSize: 15, // 字体大小
            // letterSpacing:2,       // 文本间隔
            // lineHeight:10,         // 文本行高
            // cols:100,              // 内容宽度
            // rows:100,              // 终端行数
            theme: {
              background: '#0000'
            },
            scrollback: 500 // 滚动的行数
          }),
        zjScantype:'',//主机设备类型

        traceroutResultList:'',//路由数量

        hostData:{    //扫描的主机数据

          routerListIp:'',//路由扫描到的ip
          routerOffserve:false,//控制路由是否开启开放服务

          turnOffTwo:false,
          turnOff:false,

          hostaddress:false,
          hostaddresstwo:false,


          macaddress:false,
          macaddresstwo:false,


          hostdomin:false,
          hostdomintwo:false,


          //扫描主机的数据
          hostName:'',//设备名称
          hostHostIp:'',//ip
          hostHostMac:'',//mac
          hostVendor:'',//生产厂商
          hostDomainname:'',//主机域名

          // 拓扑图对象
          visCanvas:{
            netWork:null,
            option:{
              interaction: {
                dragNodes:true,//是否能拖动节点
                dragView:true,//是否能拖动画布
                tooltipDelay: 300,
                hover:true
              }
            },
            data:{
              nodes:[],
              edges:[]
            }
          }
        },

        }
      },
      components:{
        GoBack:GoBack,
        hostMessage:hostMessage
      },

      methods: {

        yearmday: function (time) {
          return this.moment(time).format('YYYY-MM-DD')
        },

        createTpt () {
          const that=this;
          var nodes = [];
          var edges = [];
          for (var i = 0; i < that.traceroutResultList.length; i++) {
          //当前循环根据路由条数进行扫描
            nodes.push({
              id: i,
              label: "我是路由器"+i,
              image: tptlist4,
              shape: "image",
              font:{
                color:"#00ffff",
                size:16
              },
            });
            edges.push({ from: i-1, to: i });
          }
          var container = document.getElementById("mynetwork_ly");
          var data = {
            nodes: [],
            edges: [],
          };
          var options = {
            interaction: {
              dragNodes:true,//是否能拖动节点
              dragView:true,//是否能拖动画布
              tooltipDelay: 300,
              hover:true
            },
          };
          var network = new vis.Network(container, data, options);

          network.on("click", function (params) {//vis封装的点击方法
            let lyNub=that.traceroutResultList;//赋值
            that.hostData.routerListIp=lyNub[params.nodes];//路由地址数据，返给data，页面调用
            let tptJson=JSON.stringify(params, null, 4)//vis插件的内置参数数据显示
            let tptDom=this.getNodeAt(params.pointer.DOM);
            if(tptDom==params.nodes){
              $("#slmmd").show();
            }else {
              $("#slmmd").hide();
            }
          });

          network.on("dragging", function (params) {//vis封装的拖拽方法
            params.event = "[original event]";
            let domx=parseInt(params.pointer.DOM.x);
            let domy=parseInt(params.pointer.DOM.y);
            $("#zjfxscantpt").css("left",domx/2);
            $("#zjfxscantpt").css("top",domy/4);

          });


        },
        //方法
        createTptTwo () {
          const that=this;
          var nodes = [];
          var edges = [];
          for (var i = 0; i < that.traceroutResultList.length; i++) {
          //当前循环根据路由条数进行扫描
            nodes.push({
              id: i,
              label: "我是路由器"+i,
              image: tptlist4,
              shape: "image",
              font:{
                color:"#00ffff",
                size:16
              },
            });
            edges.push({ from: i-1, to: i });
          }
          //先绘制路由，后添加节点

          let zjArr=that.zjScantype;
          console.log(zjArr.length)

          for (var j = 0; j < zjArr.length; j++) {
              console.log(zjArr[j]);
              //当前循环根据路由条数进行扫描
              if(zjArr[j]===null&&zjArr[j]!==undefined){
                nodes.push({
                  id: j+i,
                  label: "其他设备"+j,
                  image: tptlist2,
                  shape: "image",
                  font:{
                    color:"#00ffff",
                    size:16
                  },
                });
              }

            edges.push({ from: j, to: i });
          }
      
          var container = document.getElementById("mynetwork_ly");
          var data = {
            nodes: nodes,
            edges: edges,
          };
          var options = {
            interaction: {
              dragNodes:true,//是否能拖动节点
              dragView:true,//是否能拖动画布
              tooltipDelay: 300,
              hover:true
            },
          };
          var network = new vis.Network(container, data, options);
          network.on("click", function (params) {

            let lyNub=that.traceroutResultList;//赋值
            that.hostData.routerListIp=lyNub[params.nodes];//路由地址数据，返给data，页面调用

            let devlist=that.IntranetScan;
            let devlistArr=[];  //声明变量数组
            let devlistArrname=[];
            let devlistArrmac=[];
            let devlistArrven=[];

            for(let i in lyNub){//遍历路由ip，push到最前面
              devlistArr.push(lyNub[i]);
            }
            for(let i in devlist){
              devlistArr.push(devlist[i].hostIp);
              devlistArrname.push(devlist[i].hostName);
              devlistArrmac.push(devlist[i].hostMac);
              devlistArrven.push(devlist[i].hostVendor);
            }
            that.hostData.hostName=devlistArr[params.nodes];//设备名称
            that.hostData.hostHostIp=devlistArrname[params.nodes];//ip
            that.hostData.hostHostMac=devlistArrmac[params.nodes];//mac
            that.hostData.hostVendor=devlistArrven[params.nodes];//生产厂商


            let tptJson=JSON.stringify(params, null, 4);
            let tptDom=this.getNodeAt(params.pointer.DOM);
            if(tptDom==params.nodes){
              $("#slmmd").show()
            }else {
              $("#slmmd").hide()
            }
          });

          network.on("dragging", function (params) {//vis封装的拖拽方法
            params.event = "[original event]";
            let domx=parseInt(params.pointer.DOM.x);
            let domy=parseInt(params.pointer.DOM.y);
            $("#zjfxscantpt").css("left",domx/2);
            $("#zjfxscantpt").css("top",domy/4);

          });


        },


        SmartScan_check(){
          $('.cbl_body_left ul li').click(function () {
            $(this).addClass('SmartScan_check').siblings('li').removeClass('SmartScan_check');  // 删除其他兄弟元素的样式
            $(".cbl_body_right").hide().eq($(this).index()).show();
            // $(".sscan_body_right").hide().eq($(this).index()).show();
            $("#tip_title").text("任务视图").eq($(this).index()).text("扫描任务");
          });
        },
        // 主机数据请求方法
        zjfx: function () {
          const that = this
          // 消息订阅
          that.socket.gets(this, [

            //判断是否有请求在继续
            ['/get/tasking/' + that.$route.query.deviceId + '/'+ this.$parent.user.userId,
              function (data) {
                console.log(data)
              }],

            //大接口
            ['/get/intelligentAttack/' + that.$route.query.deviceId + '/'+ this.$parent.user.userId,
              function (data) {
                console.log(data)
                if(data.code==-10){
                 layer.msg("当前设备离线",-1)
                }
              }],
            //路由追踪traceroute
            ['/get/traceroute/' + that.$route.query.deviceId + '/'+ this.$parent.user.userId,
              function (data) {
                layer.msg("路由扫描中...")
                console.log(data)
                if(data.code==30830) {
                  that.hostData.hostaddress=true;//开启
                  that.createtpt=1;//第一个打印
                  let lylist=data.data.addrInfo
                  that.terminal.writeln(`\x1b[33m`+"Traceroute request start...\n");  // 终端打印提示信息
                  that.traceroutResultList=data.data.traceroutResultList;//路由的数量
                  var wcm=[];
                  for(let i in lylist){
                    var slm=lylist[i].address[0];
                    var slmtime=lylist[i].times[0];

                    let valuesT = slmtime;//给声明的属性赋一个值
                    slm.time=valuesT
                    // slm['time']=valuesT;//给对象新增一个属性并赋值，解决以前赋值引起的time未定义的问题

                    wcm.push(slm);//将遍历数据push到数组中
                  }
                  console.log(wcm);
                  that.TmessageList=wcm
                  if(that.createtpt===1){
                      that.createTpt()
                  }
                  if(data.data.addrInfo.length>0){
                    that.printMsg(0,1);
                  }
                  layer.msg("路由扫描到"+data.data.addrInfo.length+"条数据");
                  that.hostData.routerList=data.data.traceroutResultList;//路由扫描内网ip数量

                }

              }],
            // 扫描主机
            ['/get/intranetScan/' + that.$route.query.deviceId + '/'+ this.$parent.user.userId,
              function (data) {
                layer.msg("主机扫描中...")

                // 对应功能编号   （301 - 307） 7种扫描方式
                let fun = data.code.toString().substring(0,3); 
                // 功能的状态码: 30 - 扫描结束成功  01 - 开始扫描 02 - 进行中（输出控制台消息） 50 - 扫描结束失败
                let code=data.code.toString().substring(3,5);

                let dt = data.data;
   
                /* 
                 * 根据不同扫描方式，分为4种数据结构 
                 * 第一种
                 */
                if(fun==304 || fun==305 ||fun==306 || fun==307){
                  // that.hostData.turnOff=true;
                  // that.hostData.hostaddress=false;
                  // that.hostData.hostaddresstwo=true;
                  // that.hostData.macaddress=true;
                  // that.hostData.hostdomin=true;
                  //扫描主机时，显示相应的界面
                  // that.createZj=2;//第二个打印
                  // that.createzw=1;//
                  // that.terminal.writeln(`\x1b[33m`+"IntranetScan request start...\n");  // 终端打印提示信息
                  // that.IntranetScan =data.data.deviceList;
                  // let zjScanTypeNub=data.data.deviceList;

                  //当扫描到主机，主机各项有值，给弹窗赋值
                  // that.hostData.turnOff=true;//将无数据的HTML显示出来
                  // console.log(zjScanTypeNub);
                  // let zjtypeNuber=[];//存放类型
                  // let zjhostNuber=[];//存放ip
                  // for(let i in zjScanTypeNub){
                  //   zjtypeNuber.push(zjScanTypeNub[i].hostType);
                  //   zjhostNuber.push(zjScanTypeNub[i].hostIp);
                  // }

                  // let routernub=that.traceroutResultList;
                  // let routerarr=0;
                  // for(let k=0;k<=routernub.length;k++){
                  //   for(let i in zjhostNuber){
                  //     if(routernub[k].split(".",3)==zjhostNuber[i].split(".",3)){
                  //       routerarr++
                  //     }
                  //   }
                  // }
                  // console.log(routerarr)
                  

                  // that.zjScantype=Array.from(new Set(zjtypeNuber));//对扫描类型的指定类型去重，后续字段可变+
              


                  // for(let i=0;i<=routernub.length;i++){
                  //   console.log(routernub[i]);
                  // }
                  // for(let i=0;i<=zjhostNuber.length;i++){
                  //   console.log(zjhostNuber[i]);
                  // }

                  //遍历所有ip和路由ip做对比.split(".", 3)
                 
                  // if(that.createzw===1){
                  //   that.createTptTwo();
                  // }
                  // if(zjScanTypeNub.length>0){
                  //   that.printMsg(0,2);
                  // }
                }else if(fun == 301){  // 第二种

                }else if(fun == 302){  // 第三种

                }else if(fun == 303){  // 第四种

                }else if(fun == 100){  // 智能任务全部结束
                    if(code==30){

                    }else if(code==50){

                    }
                }

                // 阶段性控制台打印
                if(dt && typeof(dt)=="string"){
                  // 打印服务器端message/data
                }
              }],
            // 扫描端口
            ['/get/scanPort/' + that.$route.query.deviceId + '/'+ this.$parent.user.userId,
              function (data) {
                layer.msg("端口扫描中...")
                console.log(data)
                let str=data.code.toString();
                let strsub=str.substr(str.length-2);
                if(strsub==30){
                  that.hostData.routerOffserve=true;
              
                  that.createPor=3;
                  that.ScanPort =data.data;
                  that.terminal.writeln(`\x1b[33m`+"ScanPort request start...\n");  // 终端打印提示信息
                }
                if(data.data && data.data.length>0){
                  that.printMsg(0);
                }
              }],
            // 指纹获取
            ['/get/fingerScan/' + that.$route.query.deviceId + '/'+ this.$parent.user.userId,
              function (data) {
                layer.msg("指纹扫描中...")
                console.log(data)
                let str=data.code.toString();
                let strsub=str.substr(str.length-2);
                if(strsub==30){
                  that.createFig=4;
                  that.FingerScan =data.data;
                  that.terminal.writeln(`\x1b[33m`+"FingerScan request start...\n");  // 终端打印提示信息
                }
                if(data.data && data.data.length>0){
                  that.printMsg(0);
                }

              }],
          ])


          that.socket.app('/app/intelligentAttack', {
            "deviceId": 3,                //设备ID
            "progress":1,                 //请求流程0-3,3是全流程，很慢很慢才会走通一次。
            "deviceIp":"192.168.8.216",   //设备IP
            "deviceMac":"6C:C7:EC:86:71:42",  //设备Mac地址
            "bssid": "04:A1:51:B7:67:7B",
            "essid": "OpenWrt",           //设备名称
            "traceroute": 1,
            "traceTarget":"114.114.114.114",
            "hostDiscoveryType": [
              30100,30200,30300,30400,30500,30600,30700
            ],
            "scanOpenPortType": [
              321,
              322
            ],
            "scanCustomPorts": [
              3306,
              22
            ],
            "exploits": [
              "web",
              "system",
              "database",
              "middleware",
              "devices"
            ],
            "reverseToVps": 0,
            "vpsInfo": {
              "host": "192.168.1.10",
              "port": 55553,
              "user": 'msfrpc',
              "pass": 'msfrpc',
              "ssl": 1,
            }
          })

        },
        printMsg:function(i,type){
          //type为1时，执行路由扫描打印
          //type为2时，执行主机扫描打印
          //type为3时，执行端口扫描打印
          //type为4时，执行指纹扫描打印
          let that = this;

          if(that.createtpt===1){
          //路由扫描
          let Tml=that.TmessageList;
          let t = setInterval(function(){
            clearInterval(t);
            if(i<that.TmessageList.length){
              that.terminal.writeln('\x1b[1;1;32m'+that.moment().format("YYYY/MM/DD HH:mm:ss")+(Array(3).join(' ')+(i+1)).slice(-3)+"  "+that.TmessageList[i].ip+"----"+that.TmessageList[i].operators+"----"+that.TmessageList[i].addres+"----"+that.TmessageList[i].time+"ms");
              i++;
              that.printMsg(i,1);
             }else{
              that.terminal.writeln('\n\x1b[1;1;32m'+that.moment().format("YYYY/MM/DD HH:mm:ss")+"Scanner success. "+that.TmessageList.length+" scan results\x1b[0m\n");
             }
            },50);
            return
          }

          if(that.createZj===2) {
            //主机扫描
            let Its=that.IntranetScan;
            let t = setInterval(function(){
              clearInterval(t);
              if(i<that.IntranetScan.length){
                that.terminal.writeln((Array(3).join(' ')+(i+1)).slice(-3)+" "+that.moment().format("YYYY/MM/DD HH:mm:ss")+" "+that.IntranetScan[i].scanType+"----"+that.IntranetScan[i].hostIp+"----"+that.IntranetScan[i].hostVendor);
                i++;
                that.printMsg(i,2);
              }else{
                that.terminal.writeln(+" "+that.moment().format("YYYY/MM/DD HH:mm:ss")+" Scanner success. "+that.IntranetScan.length+" scan results\x1b[0m\n");
              }
            },50);
            return
          }
          
          if(that.createPor===3) {
            //端口扫描
            let Spt=that.ScanPort;
            let t = setInterval(function(){
              clearInterval(t);
              that.terminal.writeln(`\x1b[1;1;32m`+" "+that.moment().format("YYYY/MM/DD HH:mm:ss")+(Array(3).join(' ')+(i+1)).slice(-3)+"  "+that.ScanPort[i].port+"----"+that.ScanPort[i].protocol+"----"+that.ScanPort[i].service+"----"+that.ScanPort[i].count);
              i++;
              if(i<that.ScanPort.length){
                that.printMsg(3,i);
              }else{
                that.terminal.writeln(`\x1b[40;33;1m\n`+" "+that.moment().format("YYYY/MM/DD HH:mm:ss")+" Scanner success. "+that.ScanPort.length+" scan results\x1b[0m\n");
              }
            },50);
          }
          
          if(that.createFig===4) {
            //端口扫描
            let Fgs=that.FingerScan;
            let t = setInterval(function(){
              clearInterval(t);
              that.terminal.writeln(`\x1b[1;1;32m`+" "+that.moment().format("YYYY/MM/DD HH:mm:ss")+(Array(3).join(' ')+(i+1)).slice(-3)+"  "+that.FingerScan[i].ip+"----"+that.FingerScan[i].mac+"----"+that.FingerScan[i].protocol+"----"+that.FingerScan[i].count);
              i++;
              if(i<that.FingerScan.length){
                that.printMsg(4,i);
              }else{
                that.terminal.writeln(`\x1b[40;33;1m\n`+" "+that.moment().format("YYYY/MM/DD HH:mm:ss")+" FingerScan success. "+that.FingerScan.length+" scan results\x1b[0m\n");
              }
            },50);
          }



       },
      },
    created(){

    },
    mounted(){
      const that = this
      that.zjfx()
      this.SmartScan_check();
      that.terminal.resize(Math.floor(($("#printTerm").width()) / 8),Math.floor(($("#printTerm").height()) / 16));  // 设置终端显示大小
      that.terminal.open(document.getElementById('printTerm'));
      that.terminal.writeln(`\x1b[33m`+"The device automatically detects nearby wireless...");  // 终端打印提示信息


    },
    beforeDestory(){
      console.log("清除定时器");
      clearInterval(this.timer); // 清除定时器
    },
  }
</script>

<style scoped>
#slmmd{
  display: none;
}
  #zjfxZwxx {
    text-align: center;
    width: 100%;
  }
#mynetwork_ly{
  width: 100%;
  height: 285px;
}
#printTerm{
  width: 100%;
  height: 95%;
}
.SmartScan{
  padding-top: 8px;
  display: flex;
  height: 100%;
  flex-direction: column;
  flex-flow: column;
}
.sscan_body{
  margin-top: 20px;
}



  .cblxxfz,.cblxxfz2{
    display: none;
    height: 280px;
    padding: 5px;
    margin: 0px 5px;
  }

  .sscan_body_full .lt::before{
    content: '';
    width: 8px;
    height: 8px;
    border-top: 1px solid #00ffff;
    border-left: 1px solid #00ffff;
    display: block;
    position: absolute;
    top: -1px;
    left: -1px;
    z-index: 0;
}
  .sscan_body_full .rt::before{
    content: '';
    width: 8px;
    height: 8px;
    border-right: 1px solid #00ffff;
    border-top: 1px solid #00ffff;
    display: block;
    position: absolute;
    top: -1px;
    right: -1px;
    z-index: 0;
  }

  .sscan_body_full .lb::before{
    content: '';
    width: 8px;
    height: 8px;
    border-bottom: 1px solid #00ffff;
    border-left: 1px solid #00ffff;
    display: block;
    position: absolute;
    bottom: -1px;
    left: -1px;
    z-index: 0;
  }
  .sscan_body_full .rb::before{
    content: '';
    width: 8px;
    height: 8px;
    border-right: 1px solid #00ffff;
    border-bottom: 1px solid #00ffff;
    display: block;
    position: absolute;
    bottom: -1px;
    right: -1px;
    z-index: 0;
  }

  /*选中四角*/
  .sscan_body_right_three .lt::before{
      content: '';
      width: 4px;
      height: 4px;
      border-top: 1px solid #00FF00;
      border-left: 1px solid #00FF00;
      display: block;
      position: absolute;
      top: -1px;
      left: -1px;
      z-index: 0;
    }
  .sscan_body_right_three .rt::before{
    content: '';
    width: 4px;
    height: 4px;
    border-right: 1px solid #00FF00;
    border-top: 1px solid #00FF00;
    display: block;
    position: absolute;
    top: -1px;
    right: -1px;
    z-index: 0;
  }

  .sscan_body_right_three .lb::before{
    content: '';
    width: 4px;
    height: 4px;
    border-bottom: 1px solid #00FF00;
    border-left: 1px solid #00FF00;
    display: block;
    position: absolute;
    bottom: -1px;
    left: -1px;
    z-index: 0;
  }
  .sscan_body_right_three .rb::before{
    content: '';
    width: 4px;
    height: 4px;
    border-right: 1px solid #00FF00;
    border-bottom: 1px solid #00FF00;
    display: block;
    position: absolute;
    bottom: -1px;
    right: -1px;
    z-index: 0;
  }

  /*选中四角*/
  .sscan_body_right_scound .lt::before{
    content: '';
    width: 4px;
    height: 4px;
    border-top: 1px solid #00FF00;
    border-left: 1px solid #00FF00;
    display: block;
    position: absolute;
    top: -1px;
    left: -1px;
    z-index: 0;
  }
  .sscan_body_right_scound .rt::before{
    content: '';
    width: 4px;
    height: 4px;
    border-right: 1px solid #00FF00;
    border-top: 1px solid #00FF00;
    display: block;
    position: absolute;
    top: -1px;
    right: -1px;
    z-index: 0;
  }

  .sscan_body_right_scound .lb::before{
    content: '';
    width: 4px;
    height: 4px;
    border-bottom: 1px solid #00FF00;
    border-left: 1px solid #00FF00;
    display: block;
    position: absolute;
    bottom: -1px;
    left: -1px;
    z-index: 0;
  }
  .sscan_body_right_scound .rb::before{
    content: '';
    width: 4px;
    height: 4px;
    border-right: 1px solid #00FF00;
    border-bottom: 1px solid #00FF00;
    display: block;
    position: absolute;
    bottom: -1px;
    right: -1px;
    z-index: 0;
  }













  .zuwangxq{
    background-color: #036C79;
    height: 70px;
    margin: auto 10px;
    padding:0px 10px;
  }
  .zuwangxq p:first-child{
    line-height: 30px;
    border-bottom: 1px solid white;
  }
  .zuwangxq p:last-child{
    font-size: 14px;
    line-height: 18px;
  }
  .cbl_body_right_three_span2 em:first-child{
    width: 50%;
    height: 20px;
    float: left;
    line-height: 20px;
    background-color: #1CA8DD;
    color:white;
    text-align: center;
    font-style: normal;
  }
  .cbl_body_right_three_span2 em:last-child{
    width: 50%;
    height: 20px;
    float: left;
    line-height: 20px;
    background-color: #FF915F;
    color:white;
    text-align: center;
    font-style: normal;
  }

  .cbl_body_right_three{
    width: 100%;
  }
  .cbl_body_right_three ul li{
    text-align: center;
    height: 31px;
    background-color: #05344B;
    line-height: 31px;
    margin: 10px 10px 0px 10px;
  }
  .cbl_body_right_three ul li+li{
    margin-top: 2px;
  }
  .cbl_body_right_three ul li span{
    float: left;
  }
.cbl_body_right_three_span1{
  width: 8%;
}
.cbl_body_right_three_span2{
  width: 25%;
  margin-top: 6px;
}
.cbl_body_right_three_span3{
  width: 50%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  padding-left: 10px;
  padding-right: 10px;
}
.cbl_body_right_three_span4{
  width: 12%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}






.sscan_body_right_two{
  position: relative;
}
.sscan_body_right_two ul li{
  width: 51px;
  height: 46px;
  border: 1px rgba(0,255,255,0.6) solid;
  box-shadow: inset 0px 0px 20px 0px rgba(0,255,255,0.6);
  text-align: center;
  line-height: 46px;
  position: relative;
}
.sscan_body_right_two ul li+li{
  margin-top: 10px;
}
.sscan_body_right_two ul li i{
  font-size: 32px;

}
  .cblright_right_two{
    position: absolute;
    width: 51px;
    height: 222px;
    right: 7px;
    top: 50%;
    margin-top: -92px;
  }
.cblright_right_two ul li{
  cursor: pointer;
}
  .cblright_right_two2{
    position: absolute;
    width: 51px;
    height: 222px;
    right: 7px;
    top: 50%;
    margin-top: -92px;
  }
  .cblright_right_two2 ul li{
    cursor: pointer;
  }
.cbl_body_right_two{
  overflow: auto;
}
.cbl_body_right_three{
  overflow: auto;
}

.cbl_body_right_two_span3 i{
  width: 41px;
  height: 41px;
  background-color: #031829;
  padding: 9px;
  border-radius: 4px;
  font-size: 24px;
}
.cbl_body_right_two ul li{
  background-color: #05354C;
  height: 60px;
  line-height: 60px;
  text-align: center;
  margin: 10px;
  }
.cbl_body_right_two ul li span{
  float: left;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.cbl_body_right_two_span1{
  width: 10%;
}
.cbl_body_right_two_span2{
  width: 20%;
}
.cbl_body_right_two_span3{
  width: 15%;

}
.cbl_body_right_two_span4{
  width: 20%;

}
.cbl_body_right_two_span5{
  width: 35%;
}
.cbl_body_right_two ul li+li {
  margin-top: 5px;
}
/*.sscan_body_right,.sscan_body_full{*/
  /*display: none;*/
/*}*/

  .sscan_body_right{
    /*display: none;*/
    position: relative;
  }
.sscan_body_full{
  position: absolute;
  height: calc(100% - 485px);
  border: 1px rgba(0,255,255,0.6) solid;
  bottom: 45px;
  padding: 10px;
  margin: 0px 10px 0px 0px;
  color: #33FF33;
  box-shadow: inset 0px 0px 35px 0px rgba(255,0,0,0.35);
  width: 99%;
}
  .cbl_right_ditu{
    width: 98.7%;
    height: 277px;
    overflow: hidden;
    margin:5px auto;
  }
  .ditu_title{
    height: 33px;
    background-color: rgba(0,51,102,0.6);
  }
  .ditu_list{
    height: 244px;
    overflow: auto;
  }
  .ditu_title div{
    float: left;
    height: 30px;
    text-align: center;
    line-height: 30px;
  }
  .ditu_list ul{
    height: auto;
  }
  .ditu_list ul li{
    background-color: rgba(0,0,0,0.6);
    height: 25px;
    border: 1px solid #000;
  }
  .ditu_list ul li span{
    float: left;
    height: 26px;
    text-align: center;
    line-height: 26px;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }

  /*滚动条*/

  .cbl_body_right_two::-webkit-scrollbar-track{
    margin-top: 10px;
    margin-bottom: 10px;
  }
    /*滚动条整体样式*/
  ::-webkit-scrollbar {
    width: 6px;
    height: 1px;
  }
  /*滚动条滑块*/
  ::-webkit-scrollbar-thumb {
    border-radius: 10px;
    -webkit-box-shadow: inset 0 0 5px rgba(0,0,0,0.2);
    background: #0e5057;
  }
  /*滚动条轨道*/
  ::-webkit-scrollbar-track {
    -webkit-box-shadow: inset 0 0 1px rgba(0,0,0,0);
    border-radius: 10px;
    background: #00ffff;
  }

  .ditu_title_one{
    width: 10%;
  }

  .ditu_title_two{
    width: 25%;
  }
  .ditu_title_three{
    width: 20%;
  }

  .ditu_title_four{
    width: 35%;
  }

  .ditu_title_five{
    width: 10%;
  }










  .xxmeagess{
  width: 28px;
  height: 28px;
  border-radius: 50%;
  background-color: rgba(11,33,44,0.8);
  box-shadow: inset 0px 0px 20px 0px rgba(102,255,0,0.6);
  position: absolute;
  right: -13px;
  top: -13px;
  text-align: center;
  line-height: 28px;
  font-style: normal;
  font-size: 14px!important;
}

.cbl_body_right{
  background-color: #041B2F;
  width: 87%;
  height: 287px;
  float: left;
  margin-left: 15px;
  display: none;
}
.cbl_body_right::before{
  display: block;
  content: '';
  border-width: 8px 8px 0px 8px;
  border-style: solid;
  border-color: transparent #041B2F transparent transparent;
  width: 0;
  height: 0;
  margin-top: 25px;
  margin-left: -4px;
  transform: rotate(136deg);
  position: absolute;
}
.cbl_body_right_two::before{
  margin-top: 100px;
}

.cbl_body_right_three::before{
  margin-top: 175px;
}

.cbl_body_right_four::before{
  margin-top: 250px;
}




















.cbl_body_left ul .SmartScan_check{
  width: 67px;
  height: 60px;
  line-height: 60px;
  text-align: center;
  background-color: #041B2F;
  box-shadow: inset 0px 0px 45px 0px rgba(255,0,0,0.8),0px 0px 20px rgba(255,0,0,1);
  border: 1px #FF0000 solid;
}
.cbl_body_left ul .SmartScan_check::after{

}


  .cbl_body_left{
    width: 67px;
    float: left;
    margin-left: 15px;
  }
  .cbl_body_left ul{
    width: 100%;
    /*overflow: hidden;*/
  }
  .cbl_body_left ul li{
    list-style: none;
    width: 100%;
    height: 60px;
    line-height: 60px;
    text-align: center;
    float: left;
    background-color: #0D3942;
    box-shadow: inset 0px 0px 20px 0px rgba(0,255,255,0.6);
    cursor: pointer;
    position: relative;
  }
  .cbl_body_left ul li+li{
    margin-top: 15px;
  }

  .cbl_body_left ul li i{
    font-size: 40px;
  }
  .sbl_top{
    background: #0B212C;
    height: 35px;
    line-height: 35px;
    margin: 5px 5px 10px 5px;

  }
  .sbl_top i{
    font-size: 18px;
    padding: 10px;
  }
  .sbl_top span{
    font-size: 16px;
  }
  .sscan_body_one{
    width: 100%;
    /*margin-top: 40px;*/
  }




  .sscan_body_left{
    width: 49.8%;
    float: left;
    height: 350px;
    box-shadow: inset 0px 0px 20px 0px rgba(0,255,255,0.35);
    background: #0D3942;
  }
  .sscan_body_right {
    width: 49.8%;
    float: right;
    height: 350px;
    box-shadow: inset 0px 0px 20px 0px rgba(0,255,255,0.35);
    background: #0D3942;
  }





  .sscan_body{
    color: #00fff3;
  }

</style>
